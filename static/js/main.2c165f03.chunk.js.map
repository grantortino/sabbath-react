{"version":3,"sources":["Assets/vocals.jpg","Assets/tool-logo.png","Assets/guitar.jpg","Assets/bass.jpg","Assets/drums.jpg","Components/Header.js","Components/Navigation.js","Components/Maynard.js","Components/Adam.js","Components/Justin.js","Components/Danny.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","className","src","bandLogo","alt","React","Component","Navigation","to","Maynard","vocals","Adam","guitar","Justin","bass","Danny","drums","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,oMCkB5BC,E,kDAdX,aAAe,IAAD,8BACV,gBACCC,MAAQ,GAFC,E,qDAMV,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,YAAYC,IAAKC,IAAUC,IAAI,mB,GATzCC,IAAMC,W,wBCiCZC,E,kDA1BX,aAAe,wC,qDAKX,OACQ,6BACI,wBAAIN,UAAU,kBACV,4BACI,kBAAC,IAAD,CAAMO,GAAG,UAAUP,UAAU,QAA7B,WAEJ,4BACI,kBAAC,IAAD,CAAMO,GAAG,UAAUP,UAAU,QAA7B,WAEJ,4BACI,kBAAC,IAAD,CAAMO,GAAG,QAAQP,UAAU,QAA3B,SAEJ,4BACI,kBAAC,IAAD,CAAMO,GAAG,SAASP,UAAU,QAA5B,gB,GAnBHI,IAAMC,WCEhBG,EARC,WACZ,OACI,yBAAKR,UAAU,WACX,yBAAKC,IAAKQ,IAAQN,IAAI,uB,iBCKnBO,EARF,WACT,OACI,yBAAKV,UAAU,QACX,yBAAKC,IAAKU,IAAQR,IAAI,oB,iBCKnBS,EARA,WACX,OACI,yBAAKZ,UAAU,UACX,yBAAKC,IAAKY,IAAMV,IAAI,oB,iBCKjBW,EARD,WACV,OACI,yBAAKd,UAAU,SACX,yBAAKC,IAAKc,IAAOZ,IAAI,oBCqBlBa,MAhBf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAK,UAAUC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,UAAUC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAWN,IAC/B,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWJ,OCTpBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c165f03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vocals.9c0a13aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tool-logo.12f9f283.png\";","module.exports = __webpack_public_path__ + \"static/media/guitar.f1d35889.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bass.94beaea4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drums.c0205497.jpg\";","import React from 'react';\nimport bandLogo from '../Assets/tool-logo.png'\n\nclass Header extends React.Component {\n    constructor() {\n        super();\n    this.state = {  }\n    };\n\n    render() { \n        return ( \n            <div className=\"logo-container\">\n                <img className=\"main-logo\" src={bandLogo} alt=\"band-logo\" />\n            </div>\n        );\n    }\n}\n \nexport default Header;","import React from 'react';\nimport vocals from '../Assets/vocals.jpg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass Navigation extends React.Component {\n    constructor() {\n        super();\n    }    \n\n    render() { \n        return ( \n                <div>\n                    <ul className=\"list-container\">\n                        <li>\n                            <Link to=\"/vocals\" className=\"link\">VOCALS</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/guitar\" className=\"link\">GUITAR</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/bass\" className=\"link\">BASS</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/drums\" className=\"link\">DRUMS</Link>\n                        </li>\n                    </ul>\n                </div>\n         );\n    }\n}\n \nexport default Navigation;","import React from 'react';\nimport vocals from '../Assets/vocals.jpg'\n\nconst Maynard = () => {\n    return (\n        <div className=\"Maynard\">\n            <img src={vocals} alt=\"Maynard - Vocals\"></img>\n        </div>\n    );\n};\n\nexport default Maynard;","import React from 'react';\nimport guitar from '../Assets/guitar.jpg'\n\nconst Adam = () => {\n    return (\n        <div className=\"Adam\">\n            <img src={guitar} alt=\"Adam - Guitar\"></img>\n        </div>\n    );\n};\n\nexport default Adam;","import React from 'react';\nimport bass from '../Assets/bass.jpg'\n\nconst Justin = () => {\n    return (\n        <div className=\"Justin\">\n            <img src={bass} alt=\"Justin - Bass\"></img>\n        </div>\n    );\n};\n\nexport default Justin;","import React from 'react';\nimport drums from '../Assets/drums.jpg'\n\nconst Danny = () => {\n    return (\n        <div className=\"Danny\">\n            <img src={drums} alt=\"Danny - Drums\"></img>\n        </div>\n    );\n};\n\nexport default Danny;","import React from 'react';\nimport '../Style/App.scss';\nimport { Switch, Route } from 'react-router-dom';\nimport Header from '../Components/Header.js';\nimport Navigation from '../Components/Navigation.js';\nimport Maynard from '../Components/Maynard.js';\nimport Adam from '../Components/Adam.js';\nimport Justin from '../Components/Justin.js';\nimport Danny from '../Components/Danny.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Navigation></Navigation>\n\n      <Switch>\n        <Route path=\"/vocals\" component={Maynard} />\n        <Route path=\"/guitar\" component={Adam} />\n        <Route path=\"/bass\" component={Justin} />\n        <Route path=\"/drums\" component={Danny} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App.js';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n    <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}